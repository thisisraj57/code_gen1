**Class: ProfessorController**

**Package:** com.example.professor

**Purpose:** This class is a REST controller for handling HTTP requests related to professors. It is annotated with `@RestController`, which means that it will handle HTTP requests and return responses in JSON format.

**Constructor:**

* The constructor takes a `ProfessorRepository` instance as a parameter and assigns it to the `professorRepository` field.

**Methods:**

* **getAllProfessors:** This method handles GET requests to `/api/professors` and returns a list of all professors in the database.
* **createProfessor:** This method handles POST requests to `/api/professors` and creates a new professor in the database. The new professor is created using the data in the HTTP request body.
* **getProfessorById:** This method handles GET requests to `/api/professors/{id}` and returns the professor with the specified ID.
* **updateProfessor:** This method handles PUT requests to `/api/professors/{id}` and updates the professor with the specified ID. The updated professor data is taken from the HTTP request body.
* **deleteProfessor:** This method handles DELETE requests to `/api/professors/{id}` and deletes the professor with the specified ID.

**Example Usage:**

```java
@RestController
@RequestMapping("/api/professors")
public class ProfessorController {

    private final ProfessorRepository professorRepository;

    public ProfessorController(ProfessorRepository professorRepository) {
        this.professorRepository = professorRepository;
    }

    // GET /api/professors
    @GetMapping
    public List<Professor> getAllProfessors() {
        return professorRepository.findAll();
    }

    // POST /api/professors
    @PostMapping
    public Professor createProfessor(@RequestBody Professor professor) {
        return professorRepository.save(professor);
    }

    // GET /api/professors/{id}
    @GetMapping("/{id}")
    public Professor getProfessorById(@PathVariable Long id) {
        return professorRepository.findById(id).orElseThrow(() -> new ResourceNotFoundException("Professor not found with id: " + id));
    }

    // PUT /api/professors/{id}
    @PutMapping("/{id}")
    public Professor updateProfessor(@PathVariable Long id, @RequestBody Professor professor) {
        Professor existingProfessor = professorRepository.findById(id).orElseThrow(() -> new ResourceNotFoundException("Professor not found with id: " + id));
        existingProfessor.setName(professor.getName());
        existingProfessor.setDepartment(professor.getDepartment());
        return professorRepository.save(existingProfessor);
    }

    // DELETE /api/professors/{id}
    @DeleteMapping("/{id}")
    public void deleteProfessor(@PathVariable Long id) {
        professorRepository.deleteById(id);
    }
}
```